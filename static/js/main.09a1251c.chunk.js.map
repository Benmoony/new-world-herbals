{"version":3,"sources":["App.js","Nav.js","serviceWorker.js","index.js","ginseng.jpg","FinalLogo.png","sage.jpg","lavender.jpg","ginko.jpg","honey.jpg"],"names":["App","react_default","a","createElement","className","src","logo","alt","id","class","honey","ginseng","lavender","ginko","sage","name","value","Button_default","varient","onclick","Component","ReactDOM","render","props","classes","document","querySelector","Boolean","window","location","hostname","match","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.09a1251c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './FinalLogo.png';\nimport sage from './sage.jpg';\nimport ginseng from './ginseng.jpg';\nimport lavender from './lavender.jpg';\nimport ginko from './ginko.jpg';\nimport honey from './honey.jpg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\n\nclass App extends Component {\n  render() {\n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <section id=\"header-wrap\">\n          <h2>\n            Welcome to New World Herbals\n          </h2>\n          <p>Making holistic remedies convenient, easy to use, and tasty</p>\n          </section>  \n        </header>\n        <section id=\"product-display\">\n          <h3 class=\"mission-statement\">\n              \n          </h3>\n          <h1 id=\"products\"> Herbalicious Products! </h1>\n          <img src={honey} className=\"Sage-img\"/>\n          <br></br>\n          <h2>Honey Twigs</h2>\n          <img src={ginseng} className=\"Prod-Icon\" alt=\"\"/>\n          <img src={lavender} className=\"Prod-Icon\" alt=\"\"/>\n          <img src={ginko} className=\"Prod-Icon\" alt=\"\"/>\n          <img src={sage} className=\"Prod-Icon\" alt=\"\"/>\n          <img src={ginseng} className=\"Prod-Icon\" alt=\"\"/>\n          <br></br>\n          <p class=\"prod-desc\">Focus Helps you think!</p>\n          <p class=\"prod-desc\">Sleep Aid to help you gain meaningful rest!</p>\n          <p class=\"prod-desc\">Morning blend to wake you up naturally</p>\n          <p class=\"prod-desc\">Respitory Aid to help your lungs</p>\n          <p class=\"prod-desc\">Aphrosdiac for intimate moments</p>\n        </section>\n        <section id=\"order-form\">\n          <h2>Order Here:</h2>\n          <form>\n            <label>\n              What Type of Honey Stick:\n              <select name=\"hstick\">\n                <option value=\"brain\">Focus</option>\n                <option value=\"restful\">Restful Night</option>\n                <option value=\"morning\">Morning Glory</option>\n                <option value=\"breath\">Easy Breathing</option>\n                <option value=\"pleasure\">Sweet Pleasure</option>\n              </select>\n            </label>\n            <label>\n              How many would you like to order:\n              <select name=\"quanity\">\n                <option value=\"1\">1 Stick - $2.00 USD</option>\n                <option value=\"1\">21 Sticks - $20.00 USD</option>\n                <option value=\"1\">90 Stick - $60.00 USD</option>\n              </select>\n            </label>\n            <Button varient=\"contained\"  onclick=\"{}\">\n              Add to Cart\n            </Button>\n            <Button varient=\"contained\"  onclick=\"{}\">\n              Checkout\n            </Button>\n          </form>\n        </section>\n        <div id=\"colorbuff\">\n          <div id=\"colormask\">\n          </div>\n        </div>\n        <footer>\n          <p> &copy; Website Design New World Herbals. All pictures are used for the purposes of this startup weekend and will not be used without comerical liscense</p>\n        </footer>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n});\r\n\r\n\r\nfunction NavComponent(props){\r\n  const { classes } = props;\r\n\r\n  return(\r\n    <nav>\r\n      <h1>New World Herbals</h1>\r\n      <Button varient=\"contained\"  onclick=\"{}\">\r\n        Products\r\n      </Button>\r\n      <Button varient=\"contained\"  onclick=\"{}\">\r\n        Subscribe\r\n      </Button>\r\n      <Button varient=\"contained\" onclick=\"navInformation()\">\r\n        Information\r\n      </Button>\r\n      <Button varient=\"contained\" onclick=\"navAbout()\">\r\n        About Us\r\n      </Button>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavComponent.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nReactDOM.render(<NavComponent />, document.querySelector('navbar'));\r\n\r\n/*\r\nclass NavComponent extends React.Component{\r\n    render() {\r\n      return (\r\n        <nav>\r\n        <h1>New World Herbals</h1>\r\n            <button onClick={this.toggle}>Products</button>\r\n            <button onClick={this.toggle}>Subscribe</button>\r\n            <button onClick={this.toggle}>Information</button>\r\n        </nav>\r\n      );\r\n    }\r\n}\r\n\r\n\r\n\r\n//render the nav on the dom */\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './Nav.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ginseng.6a55ae83.jpg\";","module.exports = __webpack_public_path__ + \"static/media/FinalLogo.9bd04c95.png\";","module.exports = __webpack_public_path__ + \"static/media/sage.c6f069cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lavender.41db9eb6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ginko.ec04b3bd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/honey.3630f000.jpg\";"],"sourceRoot":""}